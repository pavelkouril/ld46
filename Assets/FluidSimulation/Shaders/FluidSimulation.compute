#pragma kernel ResetTextures
#pragma kernel AddFluid
#pragma kernel Advection
#pragma kernel Overflow
#pragma kernel Diffusion
#pragma kernel CheckFlowers

float _deltaTime;
int _GridY;
int _FluidInputX;
int _FluidInputY;
int _FluidInputZ;

Texture3D<float> density;
RWTexture3D<float> densityRW;

Texture3D<float> collision;

RWStructuredBuffer<int> flowersWatered;
StructuredBuffer<int3> flowersPositions;
int _flowerCount;

[numthreads(8, 8, 8)]
void ResetTextures(uint3 threadId : SV_DispatchThreadID)
{
	densityRW[threadId] = 0;
}

[numthreads(10, 10, 10)]
void AddFluid(uint3 threadId : SV_DispatchThreadID)
{
	float toAdd = 1;

	for (int i = _FluidInputY + 5; i < _GridY; i += 2)
	{
		if (toAdd > 0)
		{
			int3 inputLoc = int3(_FluidInputX, i, _FluidInputZ);

			float current = densityRW.Load(int4(inputLoc, 0)) + collision.Load(int4(inputLoc, 0));
			if (current < 1)
			{
				float willAdd = clamp(1 - current, 0, toAdd);
				current += willAdd;
				toAdd -= willAdd;

				densityRW[inputLoc] = current;
			}
		}
	}
}

[numthreads(8, 1, 8)]
void Advection(uint3 threadId : SV_DispatchThreadID)
{
	for (int i = 0; i < _GridY; i++)
	{
		int3 loc = int3(threadId.x, i, threadId.z);

		float densityCurrent = densityRW.Load(int4(loc, 0));
		float densityUp = densityRW.Load(int4(loc + uint3(0, 1, 0), 0));

		float collisionCurrent = collision.Load(int4(loc, 0));

		float current = densityCurrent + collisionCurrent;

		if (current < 1 && densityUp > 0)
		{
			float toTransfer = clamp(1 - current, 0, densityUp);
			densityRW[loc + uint3(0, 1, 0)] = densityUp - toTransfer;
			densityCurrent += toTransfer;
		}

		densityRW[loc] = densityCurrent;
	}
}

[numthreads(1, 8, 1)]
void Diffusion(uint3 threadId : SV_DispatchThreadID)
{
	int y = threadId.y;

	for (int x = 0; x < _GridY; x++)
	{
		for (int z = 0; z < _GridY; z++)
		{
			int3 loc = int3(x, y, z);
			densityRW[loc] = density.Load(int4(loc, 0));
		}
	}

	int dir = 0;
	int dirOne = 1;
	int dirTwo = 1;

	for (int x = 0; x < _GridY; x++)
	{
		for (int z = 0; z < _GridY; z++)
		{
			int3 loc = int3(x, y, z);
			float densityDown = density.Load(int4(loc + uint3(0, -1, 0), 0));
			float collisionDown = collision.Load(int4(loc + uint3(0, -1, 0), 0));

			if (densityDown + collisionDown < 1)
			{
				continue;
			}

			float densityCurrent = densityRW.Load(int4(loc, 0));
			float collisionCurrent = collision.Load(int4(loc, 0));

			float current = densityCurrent + collisionCurrent;

			if (dir == 0)
			{
				dirOne = 1;
				dirTwo = 1;
			}
			else if (dir == 1)
			{
				dirOne = -1;
				dirTwo = 1;
			}
			else if (dir == 2)
			{
				dirOne = 1;
				dirTwo = -1;
			}
			else if (dir == 3)
			{
				dirOne = -1;
				dirTwo = -1;
			}
			dir++;
			dir = dir % 4;

			int maxNeighbours = 0;

			for (int a = -1; a <= 1; a++)
			{
				for (int c = -1; c <= 1; c++)
				{
					if (a == c)
					{
						continue;
					}

					int3 neighbourLoc = loc + int3(dirOne * a, 0, dirTwo * c);
					float densityNeighbour = densityRW.Load(int4(neighbourLoc, 0));
					float collisionNeighbour = collision.Load(int4(neighbourLoc, 0));
					float neighbour = densityNeighbour + collisionNeighbour;

					if (current > neighbour && neighbour < 1)
					{
						maxNeighbours++;
					}
				}
			}

			if (maxNeighbours == 0)
			{
				continue;
			}

			for (int a = -1; a <= 1; a++)
			{
				for (int c = -1; c <= 1; c++)
				{
					if (a == c)
					{
						continue;
					}

					int3 neighbourLoc = loc + int3(dirOne * a, 0, dirTwo * c);
					float densityNeighbour = densityRW.Load(int4(neighbourLoc, 0));
					float collisionNeighbour = collision.Load(int4(neighbourLoc, 0));
					float neighbour = densityNeighbour + collisionNeighbour;

					if (current > neighbour && neighbour < 1)
					{
						float toTransfer = clamp(densityCurrent / 5, 0, 1 - neighbour);
						densityRW[neighbourLoc] = densityNeighbour + toTransfer;
						densityCurrent -= toTransfer;
					}

				}
			}

			densityRW[loc] = densityCurrent;
		}
	}
}


[numthreads(8, 1, 8)]
void Overflow(uint3 threadId : SV_DispatchThreadID)
{
	for (int i = 0; i < _GridY; i++)
	{
		int3 loc = int3(threadId.x, i, threadId.z);

		float densityCurrent = densityRW.Load(int4(loc, 0));
		float densityUp = densityRW.Load(int4(loc + uint3(0, 1, 0), 0));

		float collisionCurrent = collision.Load(int4(loc, 0));

		float current = densityCurrent + collisionCurrent;

		if (current > 1)
		{
			float toTransfer = clamp(densityCurrent - 1, 0, densityCurrent);
			densityRW[loc + uint3(0, 1, 0)] = densityUp + toTransfer;
			densityCurrent += toTransfer;
		}

		densityRW[loc] = densityCurrent;
	}

	/*
	float densityLocal = density.Load(int4(threadId, 0));
	float rigidbodyLocal = collision.Load(int4(threadId, 0));
	float densityDown = density.Load(int4(threadId + int3(0, -1, 0), 0));
	float rigidbodyDown = collision.Load(int4(threadId + int3(0, -1, 0), 0));
	float densityUp = density.Load(int4(threadId + int3(0, 1, 0), 0));
	float rigidbodyUp = collision.Load(int4(threadId + int3(0, 1, 0), 0));

	float newdensity = densityLocal;

	// transfer as much as possible not to be overflown
	if (densityLocal + rigidbodyLocal > 1 && rigidbodyUp < 1)
	{
		newdensity = clamp(1 - rigidbodyLocal, 0, densityLocal);
	}
	// receive density from bottom voxel
	if (densityDown + rigidbodyDown > 1 && rigidbodyLocal < 1)
	{
		newdensity += clamp(densityDown + rigidbodyDown - 1, 0, densityDown);
	}
	densityRW[threadId] = newdensity;*/
}

[numthreads(1, 1, 1)]
void CheckFlowers(uint3 threadId : SV_DispatchThreadID)
{
	for (int i = 0; i < _flowerCount; i++)
	{
		if (flowersWatered[i] != 0)
		{
			continue;
		}

		for (int a = -2; a <= 2; a++)
		{
			for (int b = -2; b <= 2; b++)
			{
				for (int c = -2; c <= 2; c++)
				{
					if (density.Load(int4(flowersPositions[i] + int3(a, b, c), 0)) > 0)
					{
						flowersWatered[i] = 1;
					}
				}
			}
		}
	}
}